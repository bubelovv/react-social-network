{"version":3,"file":"static/js/294.0384b903.chunk.js","mappings":"8LACA,EAA2B,wBAA3B,EAA0D,oBAA1D,EAAyF,wBAAzF,EAAyH,qBAAzH,EAA2J,0BAA3J,EAAoM,4BAApM,EAAwO,qBAAxO,EAAwQ,wBAAxQ,EAAsS,mB,oECQhSA,EAAY,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,WAC1B,GAKIC,EAAAA,EAAAA,IAAQ,CAACC,KAAM,aAJfC,EADJ,EACIA,SACAC,EAFJ,EAEIA,aACAC,EAHJ,EAGIA,SAHJ,IAIIC,UAAYC,EAJhB,EAIgBA,OAAQC,EAJxB,EAIwBA,QAASC,EAJjC,EAIiCA,cAG3BC,EAAW,SAAAC,GAAS,OAAIC,IAC1BC,GAD4B,UAE1BA,EAAeJ,EAAcE,KAAeJ,EAAOI,KAFzB,UAG1BE,EAAiBJ,EAAcE,IAAcJ,EAAOI,IAHhC,EAM1B,OADAG,QAAQC,IAAIR,IAER,gBAAKS,UAAWH,EAAhB,UACI,kBAAMG,UAAWH,EACXd,SAAUK,GAAa,SAACa,GAAD,OAAUlB,EAASkB,EAAMZ,EAAzB,IAD7B,WAEI,gBAAKW,UAAWH,EAAhB,yBAEO,OAANN,QAAM,IAANA,OAAA,EAAAA,EAAQW,SACL,gBAAKF,UAAWH,EAAhB,SAA0BN,EAAOW,MAAMC,SAAW,YAEtD,0BACIC,YAAa,QACbJ,UAAWN,EAAS,UAChBP,EAAS,QAAS,CAClBkB,SAAU,yBACVC,UAAW,CAACC,MAAO,EAAGJ,QAAS,2BAC/BK,QAAS,CAACD,MAAO,aAAcJ,QAAS,gCAIzC,OAANZ,QAAM,IAANA,OAAA,EAAAA,EAAQkB,YACL,gBAAKT,UAAWH,EAAhB,SAA0BN,EAAOkB,SAASN,SAAW,YAEzD,0BACIC,YAAa,WACbJ,UAAWN,EAAS,aAChBP,EAAS,WAAY,CACrBkB,SAAU,yBACVC,UAAW,CAACC,MAAO,EAAGJ,QAAS,gCAIvC,iBAAKH,UAAWH,EAAhB,WACI,wCACA,oCAAWV,EAAS,aAApB,IAAiCuB,KAAM,iBAIxB,OAAf1B,IACI,4BACI,0BACI,gBAAK2B,IAAK3B,EAAY4B,IAAK,eAE/B,0BACI,0BACIR,YAAa,UACbJ,UAAWN,EAAS,YAChBP,EAAS,mBASjC,0BACI,mBAAQ0B,UAAWrB,EAASQ,UAAWH,EAAvC,0BAQnB,EAiBD,GAAeiB,EAAAA,EAAAA,KALS,SAACC,GAAD,MAAY,CAChCC,QAAQC,EAAAA,EAAAA,GAAUF,GAClB/B,WAAY+B,EAAMG,KAAKlC,WAFH,GAKgB,CAACkB,MAAAA,EAAAA,IAAzC,EAfc,SAAC,GAAiC,IAAhCA,EAA+B,EAA/BA,MAAOc,EAAwB,EAAxBA,OAAQhC,EAAgB,EAAhBA,WAK3B,OAAIgC,GAAe,SAAC,KAAD,CAAUG,GAAI,cAE1B,SAACrC,EAAD,CAAWE,WAAYA,EAAYD,SANzB,SAACkB,EAAMZ,GACpBa,EAAMD,EAAMZ,EACf,GAKJ,G","sources":["webpack://my-app/./src/components/Login/Login.module.css?3530","components/Login/Login.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formWrap\":\"Login_formWrap__rQdL3\",\"form\":\"Login_form__wI9BJ\",\"formName\":\"Login_formName__-CnaR\",\"field\":\"Login_field__Up0+7\",\"fieldValid\":\"Login_fieldValid__xfit4\",\"fieldInvalid\":\"Login_fieldInvalid__Qd1mA\",\"error\":\"Login_error__YSQ31\",\"checkbox\":\"Login_checkbox__y7qR3\",\"btn\":\"Login_btn__RdH0M\"};","import React from 'react'\r\nimport {useForm} from 'react-hook-form'\r\nimport s from './Login.module.css'\r\nimport {connect} from 'react-redux'\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {getIsAuth} from \"../../redux/auth-selectors\";\r\nimport cn from \"classnames\";\r\n\r\nconst LoginForm = ({onSubmit, urlCaptcha}) => {\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        setError,\r\n        formState: {errors, isValid, touchedFields},\r\n    } = useForm({mode: 'onChange'})\r\n\r\n    const inputCls = inputName => cn(\r\n        s.field,\r\n        {[s.fieldValid]: touchedFields[inputName] && !errors[inputName]},\r\n        {[s.fieldInvalid]: touchedFields[inputName] && errors[inputName]}\r\n    )\r\n    console.log(errors)\r\n    return (\r\n        <div className={s.formWrap}>\r\n            <form className={s.form}\r\n                  onSubmit={handleSubmit((data) => onSubmit(data, setError))}>\r\n                <div className={s.formName}>LOGIN FORM</div>\r\n\r\n                {errors?.login && (\r\n                    <div className={s.error}>{errors.login.message || 'Errors'}</div>\r\n                )}\r\n                <input\r\n                    placeholder={'login'}\r\n                    className={inputCls('login')}\r\n                    {...register('login', {\r\n                        required: 'This field id required',\r\n                        minLength: {value: 5, message: 'Min length is 5 symbols'},\r\n                        pattern: {value: /^\\S+@\\S+$/i, message: 'Enter the correct Email'},\r\n                    })}\r\n                />\r\n\r\n                {errors?.password && (\r\n                    <div className={s.error}>{errors.password.message || 'Errors'}</div>\r\n                )}\r\n                <input\r\n                    placeholder={'password'}\r\n                    className={inputCls('password')}\r\n                    {...register('password', {\r\n                        required: 'This field id required',\r\n                        minLength: {value: 5, message: 'Min length is 5 symbols'},\r\n                    })}\r\n                />\r\n\r\n                <div className={s.checkbox}>\r\n                    <p>remember me</p>\r\n                    <input {...register('checkbox')} type={'checkbox'}/>\r\n                </div>\r\n\r\n                {\r\n                    urlCaptcha !== null && (\r\n                        <div>\r\n                            <div>\r\n                                <img src={urlCaptcha} alt={'captcha'}/>\r\n                            </div>\r\n                            <div>\r\n                                <input\r\n                                    placeholder={'captcha'}\r\n                                    className={inputCls('captcha')}\r\n                                    {...register('captcha')}\r\n                                />\r\n                                {/*<input value={captcha} onChange={e => setCaptcha(e.target.value)}/>*/}\r\n                            </div>\r\n                            {/*<button className={s.btn} onClick={() => sendCaptcha(captcha)}>send captcha</button>*/}\r\n                        </div>\r\n                    )\r\n                }\r\n\r\n                <div>\r\n                    <button disabled={!isValid} className={s.btn}>\r\n                        Log in\r\n                    </button>\r\n                </div>\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Login = ({login, isAuth, urlCaptcha}) => {\r\n    const onSubmit = (data, setError) => {\r\n        login(data, setError)\r\n    }\r\n\r\n    if (isAuth) return <Navigate to={'/profile'}></Navigate>\r\n\r\n    return <LoginForm urlCaptcha={urlCaptcha} onSubmit={onSubmit}/>\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: getIsAuth(state),\r\n    urlCaptcha: state.auth.urlCaptcha\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login)"],"names":["LoginForm","onSubmit","urlCaptcha","useForm","mode","register","handleSubmit","setError","formState","errors","isValid","touchedFields","inputCls","inputName","cn","s","console","log","className","data","login","message","placeholder","required","minLength","value","pattern","password","type","src","alt","disabled","connect","state","isAuth","getIsAuth","auth","to"],"sourceRoot":""}